from socket import socket, AF_INET, SOCK_DGRAM, SOL_SOCKET, SO_REUSEADDR
import logging
from conf import HOST, PORT, BUFFER_SIZE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger("UDPServer")


def run_udp_server():
    """–ó–∞–ø—É—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UDP-—Å–µ—Ä–≤–µ—Ä–æ–º"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UDP-—Å–æ–∫–µ—Ç
        with socket(AF_INET, SOCK_DGRAM) as server_socket:
            server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
            server_socket.bind((HOST, PORT))

            logger.info(f"üöÄ UDP Server started on {HOST}:{PORT}")
            logger.info(f"üü¢ Ready to receive messages. Press Ctrl+C to stop\n")

            try:
                while True:
                    try:
                        # –ü—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                        data, addr = server_socket.recvfrom(BUFFER_SIZE)
                        client_ip = addr[0]

                        # Decode –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        message = data.decode().strip()
                        logger.info(f"üì• Received from {client_ip}: {message}")

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        ack_msg = (
                            f"Message '{message[:20]}...' received!"
                            if len(message) > 20
                            else f"Message received!"
                        )
                        server_socket.sendto(ack_msg.encode(), addr)
                    except UnicodeDecodeError:
                        logger.warning(f"‚ö†Ô∏è Invalid encoding from {client_ip}")
                    except Exception as e:
                        logger.error(f"‚ùå Processing error: {e}")
            except KeyboardInterrupt:
                logger.info("\nüõë Server shutdown requested")
    except OSError as e:
        logger.critical(f"‚õî Socket error: {e}")
    except Exception as e:
        logger.critical(f"‚õî Critical error: {e}")


if __name__ == "__main__":
    run_udp_server()
