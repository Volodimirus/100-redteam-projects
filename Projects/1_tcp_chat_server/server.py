from socket import socket, AF_INET, SOCK_STREAM, SOL_SOCKET, SO_REUSEADDR
from conf import BUFF_SIZE, MAX_WORKERS
from concurrent.futures import ThreadPoolExecutor
import argparse
import logging
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger("TCPChatServer")


def authenticate_client(client_socket: socket) -> dict:
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞, –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞

    Args:
        client_socket: –°–æ–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞: {
            'nickname': str,
            'address': tuple
        }
    """

    try:
        # –ó–∞–ø—Ä–æ—Å –Ω–∏–∫–∞
        client_socket.sendall(b"Enter your nickname: ")
        nickname_bytes = client_socket.recv(BUFF_SIZE).strip()

        if not nickname_bytes:
            raise ValueError("Empty nickname received")
        
        nickname = nickname_bytes.decode()
        address = client_socket.getpeername()
        
        return {
            "nickname": nickname,
            "address": address
        }
    except (ConnectionResetError, BrokenPipeError):
        logger.error("Connection lost during authentication")
        raise
    except Exception as e:
        logger.error(f"Authentication failed: {e}")
        raise

def handle_client_messages(source_socket: socket, target_socket: socket):
    """
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Ü–µ–ª–µ–≤–æ–º—É

    Args:
        source_socket: –°–æ–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        target_socket: –°–æ–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    """

    try:
        while True:
            message_bytes = source_socket.recv(BUFF_SIZE)
            if not message_bytes:
                logger.info("Client disconnected")
                break

            try:
                target_socket.sendall(message_bytes)
            except (ConnectionResetError, BrokenPipeError):
                logger.warning("Failed to send message to companion")
                break
    except Exception as e:
        logger.error(f"Message handling error: {e}")
    finally:
        source_socket.close()
        target_socket.close()

def main():
    parser = argparse.ArgumentParser(description="TCP chat server")
    parser.add_argument("host", type=str, help="Server hostname or IP address")
    parser.add_argument("port", type=int, help="Server port number")
    args = parser.parse_args()

    HOST = args.host
    PORT = args.port

    try:
        with socket(AF_INET, SOCK_STREAM) as server_socket:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–∫–µ—Ç–∞
            server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
            server_socket.bind((HOST, PORT))
            server_socket.listen(2)

            logger.info(f"Chat server started on {HOST}:{PORT}")
            logger.info("üü¢ Waiting for 2 clients to connect...")

            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–≤—É—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            client1_socket, client1_addr = server_socket.accept()
            logger.info(f"üîµ Client #1 connected from {client1_addr}")

            client2_socket, client2_addr = server_socket.accept()
            logger.info(f"üü£ Client #2 connected from {client2_addr}")

            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            client1_data = authenticate_client(client1_socket)
            client2_data = authenticate_client(client2_socket)

            client1_nickname = client1_data["nickname"]
            client1_address = client1_data["address"]
            client2_nickname = client2_data["nickname"]
            client2_address = client2_data["address"]

            logger.info(f"üë§ Client #1 nickname: {client1_nickname}")
            logger.info(f"üë§ Client #2 nickname: {client2_nickname}")
            logger.info("üí¨ Chat session started")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–∞—á–∞–ª–µ —á–∞—Ç–∞
            client1_socket.sendall(f"Connected to {client2_nickname}".encode())
            client2_socket.sendall(f"Connected to {client2_nickname}".encode())

            # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
                executor.submit(handle_client_messages, client1_socket, client2_socket)
                executor.submit(handle_client_messages, client2_socket, client1_socket)

                while True:
                    pass
    except KeyboardInterrupt:
        logger.info("\nüõë Server stopped by admin")
    except Exception as e:
        logger.critical(f"‚õî Critical server error: {e}")
        sys.exit(1)

