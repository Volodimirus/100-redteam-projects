from socket import socket, AF_INET, SOCK_DGRAM, SOL_SOCKET, SO_REUSEADDR
from concurrent.futures import ThreadPoolExecutor
import logging
import argparse
from conf import BUFF_SIZE
import sys

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logger = logging.getLogger("UDPChatServer")


def handle_clinet_connection(
    server_socket: socket, client_addr: tuple, message: bytes, active_clients: list
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

    Args:
        server_socket: UDP —Å–æ–∫–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        client_addr: –ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (IP, port)
        message: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        active_clients: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    """

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        if message.strip() == b"CONNECT":
            if client_addr not in active_clients:
                active_clients.append(client_addr)
                logger.info(f"‚úÖ New client connected: {client_addr}")
                server_socket.sendto(b"Auth successful! You can now chat.", client_addr)
            else:
                logger.info(f"‚ÑπÔ∏è Client already connected: {client_addr}")
                server_socket.sendto(b"You are already connected.", client_addr)
            return

        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if client_addr not in active_clients:
            logger.warning(f"‚ö†Ô∏è Unauthorized access from: {client_addr}")
            server_socket.sendto(
                b"Auth required. Send 'CONNECT' to join the chat.", client_addr
            )
            return

        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        logger.info(f"üì§ Forwarding message from {client_addr}")
        for addr in active_clients:
            if addr == client_addr:
                continue  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è
            try:
                server_socket.sendto(message, addr)
            except (ConnectionResetError, OSError):
                logger.warning(f"Failed to send to {addr}, removing client")
                active_clients.remove(addr)

        #  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        server_socket.sendto(b"Message delivered", client_addr)
    except Exception as e:
        logger.error(f"Eror handling client {client_addr}: {e}")


def run_udp_server(host: str, port: int):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç UDP —á–∞—Ç —Å–µ—Ä–≤–µ—Ä–æ–º

    Args:
        host: –•–æ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∫–∏
        port: –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∫–∏
    """

    active_clients = []

    try:
        with socket(AF_INET, SOCK_DGRAM) as server_socket:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–∫–µ—Ç–∞
            server_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
            server_socket.bind((host, port))

            logger.info(f"üöÄ UDP chat server started on {host}:{port}")
            logger.info(f"üü¢ Ready to accept connections. Press Ctrl+C to stop")

            try:
                while True:
                    # –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                    message, client_addr = server_socket.recvfrom(BUFF_SIZE)
                    logger.debug(f"Received from {client_addr}: {message[:20]}...")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    handle_clinet_connection(
                        server_socket, client_addr, message, active_clients
                    )
            except KeyboardInterrupt:
                logger.info("\nüõë Server shutdown requested")
    except OSError as e:
        logger.critical(f"‚õî Socket error: {e}")
        sys.exit(1)
    except Exception as e:
        logger.critical(f"‚õî Critical error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="UDP chat server")
    parser.add_argument("host", type=str, help="Server hostname or IP address")
    parser.add_argument("port", type=int, help="Server port number")
    args = parser.parse_args()

    host = args.host
    port = args.port

    run_udp_server(host, port)
